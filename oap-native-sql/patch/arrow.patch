diff --git a/cpp/src/gandiva/jni/jni_common.cc b/cpp/src/gandiva/jni/jni_common.cc
index 453c0a487d..e09daf6a48 100644
--- a/cpp/src/gandiva/jni/jni_common.cc
+++ b/cpp/src/gandiva/jni/jni_common.cc
@@ -350,7 +350,7 @@ NodePtr ProtoTypeToOrNode(const types::OrNode& node) {
 }
 
 NodePtr ProtoTypeToInNode(const types::InNode& node) {
-  NodePtr field = ProtoTypeToFieldNode(node.field());
+  NodePtr field = ProtoTypeToNode(node.node());
 
   if (node.has_intvalues()) {
     std::unordered_set<int32_t> int_values;
diff --git a/cpp/src/gandiva/proto/Types.proto b/cpp/src/gandiva/proto/Types.proto
index 02ba2142c4..9020ccdc5a 100644
--- a/cpp/src/gandiva/proto/Types.proto
+++ b/cpp/src/gandiva/proto/Types.proto
@@ -216,7 +216,7 @@ message FunctionSignature {
 }
 
 message InNode {
-  optional FieldNode field = 1;
+  optional TreeNode node = 1;
   optional IntConstants intValues = 2;
   optional LongConstants longValues = 3;
   optional StringConstants stringValues = 4;
diff --git a/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/InNode.java b/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/InNode.java
index 35dbcb5bb5..067e04b621 100644
--- a/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/InNode.java
+++ b/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/InNode.java
@@ -37,6 +37,7 @@ public class InNode implements TreeNode {
   private final Set<String> stringValues;
   private final Set<byte[]> binaryValues;
   private final Field field;
+  private final TreeNode input;
 
   private InNode(Set<Integer> values, Set<Long> longValues, Set<String> stringValues, Set<byte[]>
           binaryValues, Field field) {
@@ -45,31 +46,56 @@ public class InNode implements TreeNode {
     this.stringValues = stringValues;
     this.binaryValues = binaryValues;
     this.field = field;
+    this.input = TreeBuilder.makeField(field);
+  }
+
+  private InNode(Set<Integer> values, Set<Long> longValues, Set<String> stringValues, Set<byte[]>
+          binaryValues, TreeNode node) {
+    this.intValues = values;
+    this.longValues = longValues;
+    this.stringValues = stringValues;
+    this.binaryValues = binaryValues;
+    this.field = null;
+    this.input = node;
   }
 
   public static InNode makeIntInExpr(Field field, Set<Integer> intValues) {
-    return new InNode(intValues, null, null, null ,field);
+    return new InNode(intValues, null, null, null, field);
+  }
+
+  public static InNode makeIntInExpr(TreeNode node, Set<Integer> intValues) {
+    return new InNode(intValues, null, null, null, node);
   }
 
   public static InNode makeLongInExpr(Field field, Set<Long> longValues) {
-    return new InNode(null, longValues, null, null ,field);
+    return new InNode(null, longValues, null, null, field);
+  }
+
+  public static InNode makeLongInExpr(TreeNode node, Set<Long> longValues) {
+    return new InNode(null, longValues, null, null, node);
   }
 
   public static InNode makeStringInExpr(Field field, Set<String> stringValues) {
-    return new InNode(null, null, stringValues, null ,field);
+    return new InNode(null, null, stringValues, null, field);
+  }
+
+  public static InNode makeStringInExpr(TreeNode node, Set<String> stringValues) {
+    return new InNode(null, null, stringValues, null, node);
   }
 
   public static InNode makeBinaryInExpr(Field field, Set<byte[]> binaryValues) {
-    return new InNode(null, null, null, binaryValues ,field);
+    return new InNode(null, null, null, binaryValues, field);
+  }
+
+  public static InNode makeBinaryInExpr(TreeNode node, Set<byte[]> binaryValues) {
+    return new InNode(null, null, null, binaryValues, node);
   }
 
   @Override
   public GandivaTypes.TreeNode toProtobuf() throws GandivaException {
     GandivaTypes.InNode.Builder inNode = GandivaTypes.InNode.newBuilder();
 
-    GandivaTypes.FieldNode.Builder fieldNode = GandivaTypes.FieldNode.newBuilder();
-    fieldNode.setField(ArrowTypeHelper.arrowFieldToProtobuf(field));
-    inNode.setField(fieldNode);
+    inNode.setNode(input.toProtobuf());
 
     if (intValues != null) {
       GandivaTypes.IntConstants.Builder intConstants = GandivaTypes.IntConstants.newBuilder();
diff --git a/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/TreeBuilder.java b/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/TreeBuilder.java
index c20795fca7..3a01582a35 100644
--- a/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/TreeBuilder.java
+++ b/java/gandiva/src/main/java/org/apache/arrow/gandiva/expression/TreeBuilder.java
@@ -197,18 +197,38 @@ public class TreeBuilder {
     return InNode.makeIntInExpr(resultField, intValues);
   }
 
+  public static TreeNode makeInExpressionInt32(TreeNode node,
+                                               Set<Integer> intValues) {
+    return InNode.makeIntInExpr(node, intValues);
+  }
+
   public static TreeNode makeInExpressionBigInt(Field resultField,
                                                Set<Long> longValues) {
     return InNode.makeLongInExpr(resultField, longValues);
   }
 
+  public static TreeNode makeInExpressionBigInt(TreeNode node,
+                                               Set<Long> longValues) {
+    return InNode.makeLongInExpr(node, longValues);
+  }
+
   public static TreeNode makeInExpressionString(Field resultField,
                                                 Set<String> stringValues) {
     return InNode.makeStringInExpr(resultField, stringValues);
   }
 
+  public static TreeNode makeInExpressionString(TreeNode resultNode,
+                                                Set<String> stringValues) {
+    return InNode.makeStringInExpr(resultNode, stringValues);
+  }
+
   public static TreeNode makeInExpressionBinary(Field resultField,
                                                 Set<byte[]> binaryValues) {
     return InNode.makeBinaryInExpr(resultField, binaryValues);
   }
+
+  public static TreeNode makeInExpressionBinary(TreeNode node,
+                                                Set<byte[]> binaryValues) {
+    return InNode.makeBinaryInExpr(node, binaryValues);
+  }
 }
